-----------------------------------------------------------------------------
Info file generated by Happy Version 1.18.6 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_camleParser -> program                      (0)
	program -> PROGRAM programname ';' block '.'       (1)
	programname -> identifier                          (2)
	variable -> identifier                             (3)
	block -> declarationblock compoundstatement        (4)
	declarationblock -> VAR declarations               (5)
	declarationblock ->                                (6)
	declarations -> idlist type ';' declarations       (7)
	declarations -> idlist type ';'                    (8)
	idlist -> identifier                               (9)
	idlist -> idlist ',' identifier                    (10)
	type -> REAL                                       (11)
	type -> INTEGER                                    (12)
	compoundstatement -> BEGIN statements END          (13)
	statements -> statement ';' statements             (14)
	statements ->                                      (15)
	statement -> variable ':=' expression              (16)
	statement -> READ '(' variable ')'                 (17)
	statement -> WRITE '(' expression ')'              (18)
	statement -> WRITE '(' sliteral ')'                (19)
	statement -> WRITELN                               (20)
	statement -> conditional                           (21)
	statement -> repeat                                (22)
	comparison -> expression relation expression       (23)
	conditional -> IF comparison compoundstatement     (24)
	conditional -> IF comparison compoundstatement ELSE compoundstatement   (25)
	repeat -> REPEAT compoundstatement UNTIL comparison   (26)
	relation -> '>'                                    (27)
	relation -> '>='                                   (28)
	relation -> '='                                    (29)
	relation -> '!='                                   (30)
	relation -> '<='                                   (31)
	relation -> '<'                                    (32)
	expression -> restExp                              (33)
	restExp -> unaryop term                            (34)
	restExp -> unaryop '(' expression ')'              (35)
	restExp -> restExp '+' restExp                     (36)
	restExp -> restExp '-' restExp                     (37)
	restExp -> restExp '*' restExp                     (38)
	restExp -> restExp '/' restExp                     (39)
	term -> variable                                   (40)
	term -> constant                                   (41)
	unaryop -> '+'                                     (42)
	unaryop -> '-'                                     (43)
	unaryop ->                                         (44)
	constant -> rliteral                               (45)
	constant -> iliteral                               (46)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	','            { TokenComma }
	PROGRAM        { TokenProgram }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenMul }
	'/'            { TokenDiv }
	INTEGER        { TokenINTEGER }
	REAL           { TokenREAL }
	'('            { TokenOb }
	')'            { TokenCb }
	'.'            { TokenDot }
	';'            { TokenSemiColon }
	VAR            { TokenVar }
	':='           { TokenAssign }
	READ           { TokenRead }
	WRITE          { TokenWrite }
	WRITELN        { TokenWriteLn }
	'>'            { TokenGreater }
	'<'            { TokenLess }
	'>='           { TokenGreaterEq }
	'<='           { TokenLessEq }
	'='            { TokenEq }
	'!='           { TokenNeq }
	BEGIN          { TokenBegin }
	END            { TokenEnd }
	REPEAT         { TokenRepeat }
	UNTIL          { TokenUntil }
	IF             { TokenIf }
	ELSE           { TokenElse }
	iliteral       { TokenIntLiteral $$ }
	rliteral       { TokenRealLiteral $$ }
	sliteral       { TokenStringLiteral $$ }
	identifier     { TokenIdentifier $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_camleParser rule  0
	program         rule  1
	programname     rule  2
	variable        rule  3
	block           rule  4
	declarationblock rules 5, 6
	declarations    rules 7, 8
	idlist          rules 9, 10
	type            rules 11, 12
	compoundstatement rule  13
	statements      rules 14, 15
	statement       rules 16, 17, 18, 19, 20, 21, 22
	comparison      rule  23
	conditional     rules 24, 25
	repeat          rule  26
	relation        rules 27, 28, 29, 30, 31, 32
	expression      rule  33
	restExp         rules 34, 35, 36, 37, 38, 39
	term            rules 40, 41
	unaryop         rules 42, 43, 44
	constant        rules 45, 46

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	PROGRAM        shift, and enter state 2

	program        goto state 3

State 1


	PROGRAM        shift, and enter state 2


State 2

	program -> PROGRAM . programname ';' block '.'      (rule 1)

	identifier     shift, and enter state 5

	programname    goto state 4

State 3

	%start_camleParser -> program .                     (rule 0)

	%eof           accept


State 4

	program -> PROGRAM programname . ';' block '.'      (rule 1)

	';'            shift, and enter state 6


State 5

	programname -> identifier .                         (rule 2)

	';'            reduce using rule 2


State 6

	program -> PROGRAM programname ';' . block '.'      (rule 1)

	VAR            shift, and enter state 9
	BEGIN          reduce using rule 6

	block          goto state 7
	declarationblockgoto state 8

State 7

	program -> PROGRAM programname ';' block . '.'      (rule 1)

	'.'            shift, and enter state 15


State 8

	block -> declarationblock . compoundstatement       (rule 4)

	BEGIN          shift, and enter state 14

	compoundstatementgoto state 13

State 9

	declarationblock -> VAR . declarations              (rule 5)

	identifier     shift, and enter state 12

	declarations   goto state 10
	idlist         goto state 11

State 10

	declarationblock -> VAR declarations .              (rule 5)

	BEGIN          reduce using rule 5


State 11

	declarations -> idlist . type ';' declarations      (rule 7)
	declarations -> idlist . type ';'                   (rule 8)
	idlist -> idlist . ',' identifier                   (rule 10)

	','            shift, and enter state 28
	INTEGER        shift, and enter state 29
	REAL           shift, and enter state 30

	type           goto state 27

State 12

	idlist -> identifier .                              (rule 9)

	','            reduce using rule 9
	INTEGER        reduce using rule 9
	REAL           reduce using rule 9


State 13

	block -> declarationblock compoundstatement .       (rule 4)

	'.'            reduce using rule 4


State 14

	compoundstatement -> BEGIN . statements END         (rule 13)

	READ           shift, and enter state 21
	WRITE          shift, and enter state 22
	WRITELN        shift, and enter state 23
	END            reduce using rule 15
	REPEAT         shift, and enter state 24
	IF             shift, and enter state 25
	identifier     shift, and enter state 26

	variable       goto state 16
	statements     goto state 17
	statement      goto state 18
	conditional    goto state 19
	repeat         goto state 20

State 15

	program -> PROGRAM programname ';' block '.' .      (rule 1)

	%eof           reduce using rule 1


State 16

	statement -> variable . ':=' expression             (rule 16)

	':='           shift, and enter state 44


State 17

	compoundstatement -> BEGIN statements . END         (rule 13)

	END            shift, and enter state 43


State 18

	statements -> statement . ';' statements            (rule 14)

	';'            shift, and enter state 42


State 19

	statement -> conditional .                          (rule 21)

	';'            reduce using rule 21


State 20

	statement -> repeat .                               (rule 22)

	';'            reduce using rule 22


State 21

	statement -> READ . '(' variable ')'                (rule 17)

	'('            shift, and enter state 41


State 22

	statement -> WRITE . '(' expression ')'             (rule 18)
	statement -> WRITE . '(' sliteral ')'               (rule 19)

	'('            shift, and enter state 40


State 23

	statement -> WRITELN .                              (rule 20)

	';'            reduce using rule 20


State 24

	repeat -> REPEAT . compoundstatement UNTIL comparison    (rule 26)

	BEGIN          shift, and enter state 14

	compoundstatementgoto state 39

State 25

	conditional -> IF . comparison compoundstatement    (rule 24)
	conditional -> IF . comparison compoundstatement ELSE compoundstatement    (rule 25)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	comparison     goto state 33
	expression     goto state 34
	restExp        goto state 35
	unaryop        goto state 36

State 26

	variable -> identifier .                            (rule 3)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	'*'            reduce using rule 3
	'/'            reduce using rule 3
	')'            reduce using rule 3
	';'            reduce using rule 3
	':='           reduce using rule 3
	'>'            reduce using rule 3
	'<'            reduce using rule 3
	'>='           reduce using rule 3
	'<='           reduce using rule 3
	'='            reduce using rule 3
	'!='           reduce using rule 3
	BEGIN          reduce using rule 3


State 27

	declarations -> idlist type . ';' declarations      (rule 7)
	declarations -> idlist type . ';'                   (rule 8)

	';'            shift, and enter state 32


State 28

	idlist -> idlist ',' . identifier                   (rule 10)

	identifier     shift, and enter state 31


State 29

	type -> INTEGER .                                   (rule 12)

	';'            reduce using rule 12


State 30

	type -> REAL .                                      (rule 11)

	';'            reduce using rule 11


State 31

	idlist -> idlist ',' identifier .                   (rule 10)

	','            reduce using rule 10
	INTEGER        reduce using rule 10
	REAL           reduce using rule 10


State 32

	declarations -> idlist type ';' . declarations      (rule 7)
	declarations -> idlist type ';' .                   (rule 8)

	BEGIN          reduce using rule 8
	identifier     shift, and enter state 12

	declarations   goto state 69
	idlist         goto state 11

State 33

	conditional -> IF comparison . compoundstatement    (rule 24)
	conditional -> IF comparison . compoundstatement ELSE compoundstatement    (rule 25)

	BEGIN          shift, and enter state 14

	compoundstatementgoto state 68

State 34

	comparison -> expression . relation expression      (rule 23)

	'>'            shift, and enter state 62
	'<'            shift, and enter state 63
	'>='           shift, and enter state 64
	'<='           shift, and enter state 65
	'='            shift, and enter state 66
	'!='           shift, and enter state 67

	relation       goto state 61

State 35

	expression -> restExp .                             (rule 33)
	restExp -> restExp . '+' restExp                    (rule 36)
	restExp -> restExp . '-' restExp                    (rule 37)
	restExp -> restExp . '*' restExp                    (rule 38)
	restExp -> restExp . '/' restExp                    (rule 39)

	'+'            shift, and enter state 57
	'-'            shift, and enter state 58
	'*'            shift, and enter state 59
	'/'            shift, and enter state 60
	')'            reduce using rule 33
	';'            reduce using rule 33
	'>'            reduce using rule 33
	'<'            reduce using rule 33
	'>='           reduce using rule 33
	'<='           reduce using rule 33
	'='            reduce using rule 33
	'!='           reduce using rule 33
	BEGIN          reduce using rule 33


State 36

	restExp -> unaryop . term                           (rule 34)
	restExp -> unaryop . '(' expression ')'             (rule 35)

	'('            shift, and enter state 54
	iliteral       shift, and enter state 55
	rliteral       shift, and enter state 56
	identifier     shift, and enter state 26

	variable       goto state 51
	term           goto state 52
	constant       goto state 53

State 37

	unaryop -> '+' .                                    (rule 42)

	'('            reduce using rule 42
	iliteral       reduce using rule 42
	rliteral       reduce using rule 42
	identifier     reduce using rule 42


State 38

	unaryop -> '-' .                                    (rule 43)

	'('            reduce using rule 43
	iliteral       reduce using rule 43
	rliteral       reduce using rule 43
	identifier     reduce using rule 43


State 39

	repeat -> REPEAT compoundstatement . UNTIL comparison    (rule 26)

	UNTIL          shift, and enter state 50


State 40

	statement -> WRITE '(' . expression ')'             (rule 18)
	statement -> WRITE '(' . sliteral ')'               (rule 19)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	sliteral       shift, and enter state 49
	identifier     reduce using rule 44

	expression     goto state 48
	restExp        goto state 35
	unaryop        goto state 36

State 41

	statement -> READ '(' . variable ')'                (rule 17)

	identifier     shift, and enter state 26

	variable       goto state 47

State 42

	statements -> statement ';' . statements            (rule 14)

	READ           shift, and enter state 21
	WRITE          shift, and enter state 22
	WRITELN        shift, and enter state 23
	END            reduce using rule 15
	REPEAT         shift, and enter state 24
	IF             shift, and enter state 25
	identifier     shift, and enter state 26

	variable       goto state 16
	statements     goto state 46
	statement      goto state 18
	conditional    goto state 19
	repeat         goto state 20

State 43

	compoundstatement -> BEGIN statements END .         (rule 13)

	'.'            reduce using rule 13
	';'            reduce using rule 13
	UNTIL          reduce using rule 13
	ELSE           reduce using rule 13


State 44

	statement -> variable ':=' . expression             (rule 16)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	expression     goto state 45
	restExp        goto state 35
	unaryop        goto state 36

State 45

	statement -> variable ':=' expression .             (rule 16)

	';'            reduce using rule 16


State 46

	statements -> statement ';' statements .            (rule 14)

	END            reduce using rule 14


State 47

	statement -> READ '(' variable . ')'                (rule 17)

	')'            shift, and enter state 80


State 48

	statement -> WRITE '(' expression . ')'             (rule 18)

	')'            shift, and enter state 79


State 49

	statement -> WRITE '(' sliteral . ')'               (rule 19)

	')'            shift, and enter state 78


State 50

	repeat -> REPEAT compoundstatement UNTIL . comparison    (rule 26)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	comparison     goto state 77
	expression     goto state 34
	restExp        goto state 35
	unaryop        goto state 36

State 51

	term -> variable .                                  (rule 40)

	'+'            reduce using rule 40
	'-'            reduce using rule 40
	'*'            reduce using rule 40
	'/'            reduce using rule 40
	')'            reduce using rule 40
	';'            reduce using rule 40
	'>'            reduce using rule 40
	'<'            reduce using rule 40
	'>='           reduce using rule 40
	'<='           reduce using rule 40
	'='            reduce using rule 40
	'!='           reduce using rule 40
	BEGIN          reduce using rule 40


State 52

	restExp -> unaryop term .                           (rule 34)

	'+'            reduce using rule 34
	'-'            reduce using rule 34
	'*'            reduce using rule 34
	'/'            reduce using rule 34
	')'            reduce using rule 34
	';'            reduce using rule 34
	'>'            reduce using rule 34
	'<'            reduce using rule 34
	'>='           reduce using rule 34
	'<='           reduce using rule 34
	'='            reduce using rule 34
	'!='           reduce using rule 34
	BEGIN          reduce using rule 34


State 53

	term -> constant .                                  (rule 41)

	'+'            reduce using rule 41
	'-'            reduce using rule 41
	'*'            reduce using rule 41
	'/'            reduce using rule 41
	')'            reduce using rule 41
	';'            reduce using rule 41
	'>'            reduce using rule 41
	'<'            reduce using rule 41
	'>='           reduce using rule 41
	'<='           reduce using rule 41
	'='            reduce using rule 41
	'!='           reduce using rule 41
	BEGIN          reduce using rule 41


State 54

	restExp -> unaryop '(' . expression ')'             (rule 35)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	expression     goto state 76
	restExp        goto state 35
	unaryop        goto state 36

State 55

	constant -> iliteral .                              (rule 46)

	'+'            reduce using rule 46
	'-'            reduce using rule 46
	'*'            reduce using rule 46
	'/'            reduce using rule 46
	')'            reduce using rule 46
	';'            reduce using rule 46
	'>'            reduce using rule 46
	'<'            reduce using rule 46
	'>='           reduce using rule 46
	'<='           reduce using rule 46
	'='            reduce using rule 46
	'!='           reduce using rule 46
	BEGIN          reduce using rule 46


State 56

	constant -> rliteral .                              (rule 45)

	'+'            reduce using rule 45
	'-'            reduce using rule 45
	'*'            reduce using rule 45
	'/'            reduce using rule 45
	')'            reduce using rule 45
	';'            reduce using rule 45
	'>'            reduce using rule 45
	'<'            reduce using rule 45
	'>='           reduce using rule 45
	'<='           reduce using rule 45
	'='            reduce using rule 45
	'!='           reduce using rule 45
	BEGIN          reduce using rule 45


State 57

	restExp -> restExp '+' . restExp                    (rule 36)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	restExp        goto state 75
	unaryop        goto state 36

State 58

	restExp -> restExp '-' . restExp                    (rule 37)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	restExp        goto state 74
	unaryop        goto state 36

State 59

	restExp -> restExp '*' . restExp                    (rule 38)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	restExp        goto state 73
	unaryop        goto state 36

State 60

	restExp -> restExp '/' . restExp                    (rule 39)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	restExp        goto state 72
	unaryop        goto state 36

State 61

	comparison -> expression relation . expression      (rule 23)

	'+'            shift, and enter state 37
	'-'            shift, and enter state 38
	'('            reduce using rule 44
	iliteral       reduce using rule 44
	rliteral       reduce using rule 44
	identifier     reduce using rule 44

	expression     goto state 71
	restExp        goto state 35
	unaryop        goto state 36

State 62

	relation -> '>' .                                   (rule 27)

	'+'            reduce using rule 27
	'-'            reduce using rule 27
	'('            reduce using rule 27
	iliteral       reduce using rule 27
	rliteral       reduce using rule 27
	identifier     reduce using rule 27


State 63

	relation -> '<' .                                   (rule 32)

	'+'            reduce using rule 32
	'-'            reduce using rule 32
	'('            reduce using rule 32
	iliteral       reduce using rule 32
	rliteral       reduce using rule 32
	identifier     reduce using rule 32


State 64

	relation -> '>=' .                                  (rule 28)

	'+'            reduce using rule 28
	'-'            reduce using rule 28
	'('            reduce using rule 28
	iliteral       reduce using rule 28
	rliteral       reduce using rule 28
	identifier     reduce using rule 28


State 65

	relation -> '<=' .                                  (rule 31)

	'+'            reduce using rule 31
	'-'            reduce using rule 31
	'('            reduce using rule 31
	iliteral       reduce using rule 31
	rliteral       reduce using rule 31
	identifier     reduce using rule 31


State 66

	relation -> '=' .                                   (rule 29)

	'+'            reduce using rule 29
	'-'            reduce using rule 29
	'('            reduce using rule 29
	iliteral       reduce using rule 29
	rliteral       reduce using rule 29
	identifier     reduce using rule 29


State 67

	relation -> '!=' .                                  (rule 30)

	'+'            reduce using rule 30
	'-'            reduce using rule 30
	'('            reduce using rule 30
	iliteral       reduce using rule 30
	rliteral       reduce using rule 30
	identifier     reduce using rule 30


State 68

	conditional -> IF comparison compoundstatement .    (rule 24)
	conditional -> IF comparison compoundstatement . ELSE compoundstatement    (rule 25)

	';'            reduce using rule 24
	ELSE           shift, and enter state 70


State 69

	declarations -> idlist type ';' declarations .      (rule 7)

	BEGIN          reduce using rule 7


State 70

	conditional -> IF comparison compoundstatement ELSE . compoundstatement    (rule 25)

	BEGIN          shift, and enter state 14

	compoundstatementgoto state 82

State 71

	comparison -> expression relation expression .      (rule 23)

	';'            reduce using rule 23
	BEGIN          reduce using rule 23


State 72

	restExp -> restExp . '+' restExp                    (rule 36)
	restExp -> restExp . '-' restExp                    (rule 37)
	restExp -> restExp . '*' restExp                    (rule 38)
	restExp -> restExp . '/' restExp                    (rule 39)
	restExp -> restExp '/' restExp .                    (rule 39)

	'+'            reduce using rule 39
	'-'            reduce using rule 39
	'*'            reduce using rule 39
	'/'            reduce using rule 39
	')'            reduce using rule 39
	';'            reduce using rule 39
	'>'            reduce using rule 39
	'<'            reduce using rule 39
	'>='           reduce using rule 39
	'<='           reduce using rule 39
	'='            reduce using rule 39
	'!='           reduce using rule 39
	BEGIN          reduce using rule 39


State 73

	restExp -> restExp . '+' restExp                    (rule 36)
	restExp -> restExp . '-' restExp                    (rule 37)
	restExp -> restExp . '*' restExp                    (rule 38)
	restExp -> restExp '*' restExp .                    (rule 38)
	restExp -> restExp . '/' restExp                    (rule 39)

	'+'            reduce using rule 38
	'-'            reduce using rule 38
	'*'            reduce using rule 38
	'/'            shift, and enter state 60
	')'            reduce using rule 38
	';'            reduce using rule 38
	'>'            reduce using rule 38
	'<'            reduce using rule 38
	'>='           reduce using rule 38
	'<='           reduce using rule 38
	'='            reduce using rule 38
	'!='           reduce using rule 38
	BEGIN          reduce using rule 38


State 74

	restExp -> restExp . '+' restExp                    (rule 36)
	restExp -> restExp . '-' restExp                    (rule 37)
	restExp -> restExp '-' restExp .                    (rule 37)
	restExp -> restExp . '*' restExp                    (rule 38)
	restExp -> restExp . '/' restExp                    (rule 39)

	'+'            shift, and enter state 57
	'-'            reduce using rule 37
	'*'            shift, and enter state 59
	'/'            shift, and enter state 60
	')'            reduce using rule 37
	';'            reduce using rule 37
	'>'            reduce using rule 37
	'<'            reduce using rule 37
	'>='           reduce using rule 37
	'<='           reduce using rule 37
	'='            reduce using rule 37
	'!='           reduce using rule 37
	BEGIN          reduce using rule 37


State 75

	restExp -> restExp . '+' restExp                    (rule 36)
	restExp -> restExp '+' restExp .                    (rule 36)
	restExp -> restExp . '-' restExp                    (rule 37)
	restExp -> restExp . '*' restExp                    (rule 38)
	restExp -> restExp . '/' restExp                    (rule 39)

	'+'            reduce using rule 36
	'-'            reduce using rule 36
	'*'            shift, and enter state 59
	'/'            shift, and enter state 60
	')'            reduce using rule 36
	';'            reduce using rule 36
	'>'            reduce using rule 36
	'<'            reduce using rule 36
	'>='           reduce using rule 36
	'<='           reduce using rule 36
	'='            reduce using rule 36
	'!='           reduce using rule 36
	BEGIN          reduce using rule 36


State 76

	restExp -> unaryop '(' expression . ')'             (rule 35)

	')'            shift, and enter state 81


State 77

	repeat -> REPEAT compoundstatement UNTIL comparison .    (rule 26)

	';'            reduce using rule 26


State 78

	statement -> WRITE '(' sliteral ')' .               (rule 19)

	';'            reduce using rule 19


State 79

	statement -> WRITE '(' expression ')' .             (rule 18)

	';'            reduce using rule 18


State 80

	statement -> READ '(' variable ')' .                (rule 17)

	';'            reduce using rule 17


State 81

	restExp -> unaryop '(' expression ')' .             (rule 35)

	'+'            reduce using rule 35
	'-'            reduce using rule 35
	'*'            reduce using rule 35
	'/'            reduce using rule 35
	')'            reduce using rule 35
	';'            reduce using rule 35
	'>'            reduce using rule 35
	'<'            reduce using rule 35
	'>='           reduce using rule 35
	'<='           reduce using rule 35
	'='            reduce using rule 35
	'!='           reduce using rule 35
	BEGIN          reduce using rule 35


State 82

	conditional -> IF comparison compoundstatement ELSE compoundstatement .    (rule 25)

	';'            reduce using rule 25


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 47
Number of terminals: 33
Number of non-terminals: 21
Number of states: 83
